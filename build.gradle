plugins {
    id 'fabric-loom' version '1.10-SNAPSHOT'
    id 'maven-publish'
}

version = "${project.mod_version}_${project.hasProperty('mcversion') ? project.mcversion : (project.minecraft_version ?: '')}"
group = project.maven_group

// Define the target Minecraft version from the mcversion property, default to gradle.properties minecraft_version
ext {
    targetVersion = project.hasProperty('mcversion') ? project.mcversion : project.minecraft_version
    versionPropertiesFile = "versions/${targetVersion}/gradle.properties"
}

// Set the archivesName to include the target version
base {
    archivesName = "${project.archives_base_name}"
}

// Load version-specific gradle.properties if it exists
def versionProps = new Properties()
if (file(versionPropertiesFile).exists()) {
    file(versionPropertiesFile).withInputStream { stream ->
        versionProps.load(stream)
    }
    println "Loaded version-specific properties from ${versionPropertiesFile}"
} else if (project.hasProperty('mcversion')) {
    throw new GradleException("No gradle.properties found for Minecraft version ${targetVersion}. Ensure ${versionPropertiesFile} exists.")
}

// Fallback to root gradle.properties for missing properties
def getProp = { key, defaultValue ->
    versionProps.getProperty(key, project.hasProperty(key) ? project[key] : defaultValue)
}

// Define version-specific properties with fallbacks
ext {
    minVersion = getProp('min_minecraft_version', project.min_minecraft_version)
    yarnMappings = getProp('yarn_mappings', project.yarn_mappings)
    fabricVersion = getProp('fabric_version', project.fabric_version)
    loaderVersion = getProp('loader_version', project.loader_version)
}

// Update dependencies to use dynamic properties
dependencies {
    minecraft "com.mojang:minecraft:${targetVersion}"
    mappings "net.fabricmc:yarn:${yarnMappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${loaderVersion}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabricVersion}"
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", targetVersion
    inputs.property "loader_version", loaderVersion
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": targetVersion,
                "min_minecraft_version": minVersion,
                "loader_version": loaderVersion
    }

    if (!project.hasProperty("mcversion")) {
        filter { line ->
            if (line.contains('"minecraft": ">=') && line.contains('<='))
                return line.replaceAll(/"minecraft":\s*">=.+<=.+"/, '"minecraft": "*"')
            return line
        }
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }
    repositories {
        // Add repositories to publish to here
    }
}

// Validate mcversion (only require gradle.properties, java/resources are optional)
tasks.named('build') {
    doFirst {
        if (project.hasProperty('mcversion') && !file(versionPropertiesFile).exists()) {
            throw new GradleException("No gradle.properties found for Minecraft version ${targetVersion}. Ensure ${versionPropertiesFile} exists.")
        }
        if (!project.hasProperty('mcversion')) {
            println "Warning: No mcversion specified, using default minecraft_version: ${project.minecraft_version}"
        }
    }
}